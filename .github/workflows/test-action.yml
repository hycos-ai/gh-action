name: Test Build Log Analyzer Action

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch: # Manual trigger for testing

jobs:
  # Create some sample logs with errors/warnings for testing
  generate-test-logs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install
          echo "‚úÖ Dependencies installed successfully"

      - name: Generate test logs with issues
        run: |
          echo "üîß Running build process..."
          echo "WARNING: Deprecated function usage detected"
          echo "ERROR: Failed to compile module xyz"
          echo "FATAL: Critical system failure detected"
          echo "SECURITY: Potential vulnerability found"
          echo "Build process completed with issues"

      - name: Run tests (simulate failure)
        run: |
          echo "Running test suite..."
          echo "Test 1: PASSED"
          echo "Test 2: FAILED - assertion error"
          echo "Test 3: WARNING - slow test detected"
          # Simulate a test failure
          exit 1
        continue-on-error: true

  # Test the log analyzer action
  test-log-analyzer:
    runs-on: ubuntu-latest
    needs: [generate-test-logs]
    if: always() # Run even if previous job fails
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test Build Log Analyzer Action
        uses: ./ # Use the local action
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # ‚ö†Ô∏è HARDCODED CREDENTIALS - FOR TESTING ONLY!
          # Replace these with your actual AWS credentials
          aws-access-key-id: 'YOUR_AWS_ACCESS_KEY_HERE'
          aws-secret-access-key: 'YOUR_AWS_SECRET_KEY_HERE'
          aws-region: 'us-east-1'
          s3-bucket: 'your-test-bucket-name'
          s3-key-prefix: 'github-action-test-logs'
          # API Authentication - Add your credentials here
          analysis-api-endpoint: 'http://54.89.53.140:8080'
          api-username: 'YOUR_API_USERNAME_HERE'
          api-password: 'YOUR_API_PASSWORD_HERE'
          analysis-timeout: '60' # Shorter timeout for testing
        id: log-analysis

      - name: Display Test Results
        run: |
          echo "üéØ Test Results:"
          echo "Auth Status: ${{ steps.log-analysis.outputs.auth-status }}"
          echo "Analysis Status: ${{ steps.log-analysis.outputs.analysis-status }}"
          echo "Issues Found: ${{ steps.log-analysis.outputs.issues-found }}"
          echo "S3 URL: ${{ steps.log-analysis.outputs.s3-url }}"
          echo ""
          echo "üë§ User Info:"
          echo '${{ steps.log-analysis.outputs.user-info }}' | jq '.' || echo "No user info"
          echo ""
          echo "üìä Full Analysis Results:"
          echo '${{ steps.log-analysis.outputs.analysis-results }}' | jq '.' || echo "Failed to parse results"

      - name: Verify Results
        run: |
          echo "üîç Verifying test results..."

          # Check authentication
          if [ "${{ steps.log-analysis.outputs.auth-status }}" = "success" ]; then
            echo "‚úÖ Authentication successful!"
          else
            echo "‚ö†Ô∏è  Authentication status: ${{ steps.log-analysis.outputs.auth-status }}"
          fi

          # Check analysis completion
          if [ "${{ steps.log-analysis.outputs.analysis-status }}" = "success" ]; then
            echo "‚úÖ Analysis completed successfully!"
          else
            echo "‚ùå Analysis failed with status: ${{ steps.log-analysis.outputs.analysis-status }}"
          fi

          # Check if issues were found (we expect some from our test logs)
          issues_count="${{ steps.log-analysis.outputs.issues-found }}"
          if [ "$issues_count" -gt "0" ]; then
            echo "‚úÖ Found $issues_count issues as expected!"
          else
            echo "‚ö†Ô∏è  No issues found - check if analysis is working properly"
          fi

          echo "üéâ Test verification complete!"
